문제해결과정
1. 문제를 공격적으로 읽기.문제가 원하는 바를 곁눈질이 아닌 완전히 읽고 이해하기.제약조건 놓치지 말기
제약조건은 때로 문제를 푸는 핵심 단서이다.
2. 문제를 다루기 쉬운 개념으로, 나의 언어로 재정의. (복잡할수록 효율적) - 쉬운문제를 쉽게.프로그래밍 방향 결정
3. 계획 세우기 - 알고리즘, 자료구조 선정
4. 계획 검증 - 메모리, 시간 계산해서 되는지
5. 구현
6. 피드백(학습용) - 해법을 찾는데 결정적이었던 깨달음을 기록, 통찰패턴 발견가능. (통찰얻기)

체계적인 접근을 위한 질문들
1. 비슷한 문제를 풀어본 적이 있던가 ?
2. 단순한 방법에서 시작할 수 있을까 ?
단순하지만 느린 알고리즘으로 충분한 경우, 그 알고리즘에 약간의 최적화를 더하는 방향
어렵고 복잡한 문제라고 느낄 때, 고려해봐야 함.
알고리즘의 기준선
3. 문제 푸는 과정을 수식화 할 수 있나 ?
급할수록 돌아가는 방식.번뜩이는 아이디어 필요시 사용
내가 직접 손으로 문제를 풀어보고, 그 과정을 알고리즘화 할 수 있는지 생각.
4. 문제를 단순화 할 순 없을까 ?
원 문제의 해법이 단순한 해법의 연장선에 있을 수 있다.
5. 그림으로 그려볼 수 있나 ?
그려보면 번뜩이는 아이디어가 떠오를 수 있다.;ㅎ
6. 수식으로 표현할 수 있을까?
7, 문제를 분해할 수 있을까?
8. 뒤에서부터 생각해서 문제를 풀 수 있나?
9. 순서를 강제할 수 있나?
10. 특정 형태의 답만 고려할 수 있나?